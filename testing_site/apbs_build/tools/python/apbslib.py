# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_apbslib', [dirname(__file__)])
        except ImportError:
            import _apbslib
            return _apbslib
        if fp is not None:
            try:
                _mod = imp.load_module('_apbslib', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _apbslib = swig_import_helper()
    del swig_import_helper
else:
    import _apbslib
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class Valist(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Valist, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Valist, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _apbslib.new_Valist()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _apbslib.delete_Valist
    __del__ = lambda self: None
    __swig_setmethods__["number"] = _apbslib.Valist_number_set
    __swig_getmethods__["number"] = _apbslib.Valist_number_get
    if _newclass:
        number = _swig_property(_apbslib.Valist_number_get, _apbslib.Valist_number_set)
Valist_swigregister = _apbslib.Valist_swigregister
Valist_swigregister(Valist)


def Valist_getAtomList(thee):
    return _apbslib.Valist_getAtomList(thee)
Valist_getAtomList = _apbslib.Valist_getAtomList

def Valist_getAtom(thee, position):
    return _apbslib.Valist_getAtom(thee, position)
Valist_getAtom = _apbslib.Valist_getAtom
class Vatom(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vatom, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vatom, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _apbslib.new_Vatom()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _apbslib.delete_Vatom
    __del__ = lambda self: None
    __swig_setmethods__["id"] = _apbslib.Vatom_id_set
    __swig_getmethods__["id"] = _apbslib.Vatom_id_get
    if _newclass:
        id = _swig_property(_apbslib.Vatom_id_get, _apbslib.Vatom_id_set)
Vatom_swigregister = _apbslib.Vatom_swigregister
Vatom_swigregister(Vatom)


def Vatom_getPosition(thee):
    return _apbslib.Vatom_getPosition(thee)
Vatom_getPosition = _apbslib.Vatom_getPosition

def Vatom_setCharge(thee, charge):
    return _apbslib.Vatom_setCharge(thee, charge)
Vatom_setCharge = _apbslib.Vatom_setCharge

def Vatom_getCharge(thee):
    return _apbslib.Vatom_getCharge(thee)
Vatom_getCharge = _apbslib.Vatom_getCharge

def Vatom_getRadius(thee):
    return _apbslib.Vatom_getRadius(thee)
Vatom_getRadius = _apbslib.Vatom_getRadius
class MGparm(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MGparm, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MGparm, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _apbslib.new_MGparm()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _apbslib.delete_MGparm
    __del__ = lambda self: None
    __swig_setmethods__["type"] = _apbslib.MGparm_type_set
    __swig_getmethods__["type"] = _apbslib.MGparm_type_get
    if _newclass:
        type = _swig_property(_apbslib.MGparm_type_get, _apbslib.MGparm_type_set)
MGparm_swigregister = _apbslib.MGparm_swigregister
MGparm_swigregister(MGparm)


def MGparm_setCenterX(thee, x):
    return _apbslib.MGparm_setCenterX(thee, x)
MGparm_setCenterX = _apbslib.MGparm_setCenterX

def MGparm_setCenterY(thee, y):
    return _apbslib.MGparm_setCenterY(thee, y)
MGparm_setCenterY = _apbslib.MGparm_setCenterY

def MGparm_setCenterZ(thee, z):
    return _apbslib.MGparm_setCenterZ(thee, z)
MGparm_setCenterZ = _apbslib.MGparm_setCenterZ
class PBEparm(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PBEparm, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PBEparm, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _apbslib.new_PBEparm()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _apbslib.delete_PBEparm
    __del__ = lambda self: None
    __swig_setmethods__["temp"] = _apbslib.PBEparm_temp_set
    __swig_getmethods__["temp"] = _apbslib.PBEparm_temp_get
    if _newclass:
        temp = _swig_property(_apbslib.PBEparm_temp_get, _apbslib.PBEparm_temp_set)
    __swig_setmethods__["pdie"] = _apbslib.PBEparm_pdie_set
    __swig_getmethods__["pdie"] = _apbslib.PBEparm_pdie_get
    if _newclass:
        pdie = _swig_property(_apbslib.PBEparm_pdie_get, _apbslib.PBEparm_pdie_set)
    __swig_setmethods__["sdie"] = _apbslib.PBEparm_sdie_set
    __swig_getmethods__["sdie"] = _apbslib.PBEparm_sdie_get
    if _newclass:
        sdie = _swig_property(_apbslib.PBEparm_sdie_get, _apbslib.PBEparm_sdie_set)
    __swig_setmethods__["molid"] = _apbslib.PBEparm_molid_set
    __swig_getmethods__["molid"] = _apbslib.PBEparm_molid_get
    if _newclass:
        molid = _swig_property(_apbslib.PBEparm_molid_get, _apbslib.PBEparm_molid_set)
PBEparm_swigregister = _apbslib.PBEparm_swigregister
PBEparm_swigregister(PBEparm)

class Vcom(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vcom, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vcom, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _apbslib.new_Vcom()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _apbslib.delete_Vcom
    __del__ = lambda self: None
Vcom_swigregister = _apbslib.Vcom_swigregister
Vcom_swigregister(Vcom)


def Vcom_ctor(commtype):
    return _apbslib.Vcom_ctor(commtype)
Vcom_ctor = _apbslib.Vcom_ctor

def Vcom_size(thee):
    return _apbslib.Vcom_size(thee)
Vcom_size = _apbslib.Vcom_size

def Vcom_rank(thee):
    return _apbslib.Vcom_rank(thee)
Vcom_rank = _apbslib.Vcom_rank
class Vmem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vmem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vmem, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _apbslib.new_Vmem()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _apbslib.delete_Vmem
    __del__ = lambda self: None
Vmem_swigregister = _apbslib.Vmem_swigregister
Vmem_swigregister(Vmem)


def Vmem_ctor(name):
    return _apbslib.Vmem_ctor(name)
Vmem_ctor = _apbslib.Vmem_ctor
class Vpmg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vpmg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vpmg, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _apbslib.new_Vpmg()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _apbslib.delete_Vpmg
    __del__ = lambda self: None
Vpmg_swigregister = _apbslib.Vpmg_swigregister
Vpmg_swigregister(Vpmg)

class Vpbe(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vpbe, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vpbe, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _apbslib.new_Vpbe()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _apbslib.delete_Vpbe
    __del__ = lambda self: None
    __swig_setmethods__["acc"] = _apbslib.Vpbe_acc_set
    __swig_getmethods__["acc"] = _apbslib.Vpbe_acc_get
    if _newclass:
        acc = _swig_property(_apbslib.Vpbe_acc_get, _apbslib.Vpbe_acc_set)
Vpbe_swigregister = _apbslib.Vpbe_swigregister
Vpbe_swigregister(Vpbe)

class NOsh_calc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NOsh_calc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NOsh_calc, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _apbslib.new_NOsh_calc()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _apbslib.delete_NOsh_calc
    __del__ = lambda self: None
    __swig_setmethods__["mgparm"] = _apbslib.NOsh_calc_mgparm_set
    __swig_getmethods__["mgparm"] = _apbslib.NOsh_calc_mgparm_get
    if _newclass:
        mgparm = _swig_property(_apbslib.NOsh_calc_mgparm_get, _apbslib.NOsh_calc_mgparm_set)
    __swig_setmethods__["femparm"] = _apbslib.NOsh_calc_femparm_set
    __swig_getmethods__["femparm"] = _apbslib.NOsh_calc_femparm_get
    if _newclass:
        femparm = _swig_property(_apbslib.NOsh_calc_femparm_get, _apbslib.NOsh_calc_femparm_set)
    __swig_setmethods__["pbeparm"] = _apbslib.NOsh_calc_pbeparm_set
    __swig_getmethods__["pbeparm"] = _apbslib.NOsh_calc_pbeparm_get
    if _newclass:
        pbeparm = _swig_property(_apbslib.NOsh_calc_pbeparm_get, _apbslib.NOsh_calc_pbeparm_set)
    __swig_setmethods__["calctype"] = _apbslib.NOsh_calc_calctype_set
    __swig_getmethods__["calctype"] = _apbslib.NOsh_calc_calctype_get
    if _newclass:
        calctype = _swig_property(_apbslib.NOsh_calc_calctype_get, _apbslib.NOsh_calc_calctype_set)
NOsh_calc_swigregister = _apbslib.NOsh_calc_swigregister
NOsh_calc_swigregister(NOsh_calc)

class NOsh(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NOsh, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NOsh, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _apbslib.new_NOsh()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _apbslib.delete_NOsh
    __del__ = lambda self: None
    __swig_setmethods__["ncalc"] = _apbslib.NOsh_ncalc_set
    __swig_getmethods__["ncalc"] = _apbslib.NOsh_ncalc_get
    if _newclass:
        ncalc = _swig_property(_apbslib.NOsh_ncalc_get, _apbslib.NOsh_ncalc_set)
    __swig_setmethods__["nprint"] = _apbslib.NOsh_nprint_set
    __swig_getmethods__["nprint"] = _apbslib.NOsh_nprint_get
    if _newclass:
        nprint = _swig_property(_apbslib.NOsh_nprint_get, _apbslib.NOsh_nprint_set)
    __swig_setmethods__["nelec"] = _apbslib.NOsh_nelec_set
    __swig_getmethods__["nelec"] = _apbslib.NOsh_nelec_get
    if _newclass:
        nelec = _swig_property(_apbslib.NOsh_nelec_get, _apbslib.NOsh_nelec_set)
    __swig_setmethods__["nmol"] = _apbslib.NOsh_nmol_set
    __swig_getmethods__["nmol"] = _apbslib.NOsh_nmol_get
    if _newclass:
        nmol = _swig_property(_apbslib.NOsh_nmol_get, _apbslib.NOsh_nmol_set)
    __swig_setmethods__["printwhat"] = _apbslib.NOsh_printwhat_set
    __swig_getmethods__["printwhat"] = _apbslib.NOsh_printwhat_get
    if _newclass:
        printwhat = _swig_property(_apbslib.NOsh_printwhat_get, _apbslib.NOsh_printwhat_set)
NOsh_swigregister = _apbslib.NOsh_swigregister
NOsh_swigregister(NOsh)


_apbslib.NPT_ENERGY_swigconstant(_apbslib)
NPT_ENERGY = _apbslib.NPT_ENERGY

_apbslib.NPT_FORCE_swigconstant(_apbslib)
NPT_FORCE = _apbslib.NPT_FORCE

_apbslib.NPT_ELECENERGY_swigconstant(_apbslib)
NPT_ELECENERGY = _apbslib.NPT_ELECENERGY

_apbslib.NPT_ELECFORCE_swigconstant(_apbslib)
NPT_ELECFORCE = _apbslib.NPT_ELECFORCE

_apbslib.NPT_APOLENERGY_swigconstant(_apbslib)
NPT_APOLENERGY = _apbslib.NPT_APOLENERGY

_apbslib.NPT_APOLFORCE_swigconstant(_apbslib)
NPT_APOLFORCE = _apbslib.NPT_APOLFORCE

def NOsh_getCalc(thee, icalc):
    return _apbslib.NOsh_getCalc(thee, icalc)
NOsh_getCalc = _apbslib.NOsh_getCalc

def NOsh_elecname(thee, ielec):
    return _apbslib.NOsh_elecname(thee, ielec)
NOsh_elecname = _apbslib.NOsh_elecname

def NOsh_elec2calc(thee, icalc):
    return _apbslib.NOsh_elec2calc(thee, icalc)
NOsh_elec2calc = _apbslib.NOsh_elec2calc

def NOsh_printWhat(thee, iprint):
    return _apbslib.NOsh_printWhat(thee, iprint)
NOsh_printWhat = _apbslib.NOsh_printWhat

def NOsh_parseInputFile(thee, filename):
    return _apbslib.NOsh_parseInputFile(thee, filename)
NOsh_parseInputFile = _apbslib.NOsh_parseInputFile

def NOsh_ctor(rank, size):
    return _apbslib.NOsh_ctor(rank, size)
NOsh_ctor = _apbslib.NOsh_ctor
class AtomForce(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtomForce, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AtomForce, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _apbslib.new_AtomForce()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _apbslib.delete_AtomForce
    __del__ = lambda self: None
AtomForce_swigregister = _apbslib.AtomForce_swigregister
AtomForce_swigregister(AtomForce)


def new_valist(maxargs):
    return _apbslib.new_valist(maxargs)
new_valist = _apbslib.new_valist

def get_Valist(args, n):
    return _apbslib.get_Valist(args, n)
get_Valist = _apbslib.get_Valist

def new_gridlist(maxargs):
    return _apbslib.new_gridlist(maxargs)
new_gridlist = _apbslib.new_gridlist

def new_pmglist(maxargs):
    return _apbslib.new_pmglist(maxargs)
new_pmglist = _apbslib.new_pmglist

def get_Vpmg(args, n):
    return _apbslib.get_Vpmg(args, n)
get_Vpmg = _apbslib.get_Vpmg

def new_pmgplist(maxargs):
    return _apbslib.new_pmgplist(maxargs)
new_pmgplist = _apbslib.new_pmgplist

def new_pbelist(maxargs):
    return _apbslib.new_pbelist(maxargs)
new_pbelist = _apbslib.new_pbelist

def get_Vpbe(args, n):
    return _apbslib.get_Vpbe(args, n)
get_Vpbe = _apbslib.get_Vpbe

def new_atomforcelist(maxargs):
    return _apbslib.new_atomforcelist(maxargs)
new_atomforcelist = _apbslib.new_atomforcelist

def delete_atomforcelist(a):
    return _apbslib.delete_atomforcelist(a)
delete_atomforcelist = _apbslib.delete_atomforcelist

def delete_valist(a):
    return _apbslib.delete_valist(a)
delete_valist = _apbslib.delete_valist

def delete_gridlist(a):
    return _apbslib.delete_gridlist(a)
delete_gridlist = _apbslib.delete_gridlist

def delete_pmglist(a):
    return _apbslib.delete_pmglist(a)
delete_pmglist = _apbslib.delete_pmglist

def delete_pmgplist(a):
    return _apbslib.delete_pmgplist(a)
delete_pmgplist = _apbslib.delete_pmgplist

def delete_pbelist(a):
    return _apbslib.delete_pbelist(a)
delete_pbelist = _apbslib.delete_pbelist

def delete_Nosh(nosh):
    return _apbslib.delete_Nosh(nosh)
delete_Nosh = _apbslib.delete_Nosh

def delete_Com(com):
    return _apbslib.delete_Com(com)
delete_Com = _apbslib.delete_Com

def delete_Mem(mem):
    return _apbslib.delete_Mem(mem)
delete_Mem = _apbslib.delete_Mem

def get_AtomForce(aforce, n):
    return _apbslib.get_AtomForce(aforce, n)
get_AtomForce = _apbslib.get_AtomForce

def make_Valist(args, n):
    return _apbslib.make_Valist(args, n)
make_Valist = _apbslib.make_Valist

def remove_Valist(thee):
    return _apbslib.remove_Valist(thee)
remove_Valist = _apbslib.remove_Valist

def double_array(size):
    return _apbslib.double_array(size)
double_array = _apbslib.double_array

def int_array(size):
    return _apbslib.int_array(size)
int_array = _apbslib.int_array

def delete_double_array(d):
    return _apbslib.delete_double_array(d)
delete_double_array = _apbslib.delete_double_array

def delete_int_array(i):
    return _apbslib.delete_int_array(i)
delete_int_array = _apbslib.delete_int_array

def get_entry(array, i):
    return _apbslib.get_entry(array, i)
get_entry = _apbslib.get_entry

def set_entry(array, i, val):
    return _apbslib.set_entry(array, i, val)
set_entry = _apbslib.set_entry

def parseInputFromString(nosh, string):
    return _apbslib.parseInputFromString(nosh, string)
parseInputFromString = _apbslib.parseInputFromString

def Valist_load(thee, size, x, y, z, chg, rad):
    return _apbslib.Valist_load(thee, size, x, y, z, chg, rad)
Valist_load = _apbslib.Valist_load

def NOsh_setupElecCalc(nosh, alist):
    return _apbslib.NOsh_setupElecCalc(nosh, alist)
NOsh_setupElecCalc = _apbslib.NOsh_setupElecCalc

def NOsh_setupApolCalc(nosh, alist):
    return _apbslib.NOsh_setupApolCalc(nosh, alist)
NOsh_setupApolCalc = _apbslib.NOsh_setupApolCalc

def wrap_forceMG(mem, nosh, pbeparm, mgparm, pmg, atomForce, alist, forcearray, calcid):
    return _apbslib.wrap_forceMG(mem, nosh, pbeparm, mgparm, pmg, atomForce, alist, forcearray, calcid)
wrap_forceMG = _apbslib.wrap_forceMG

def getAtomPosition(atom):
    return _apbslib.getAtomPosition(atom)
getAtomPosition = _apbslib.getAtomPosition

def getPotentials(nosh, pbeparm, pmg, alist):
    return _apbslib.getPotentials(nosh, pbeparm, pmg, alist)
getPotentials = _apbslib.getPotentials

def getEnergies(pmg, alist):
    return _apbslib.getEnergies(pmg, alist)
getEnergies = _apbslib.getEnergies

def getForces(atomForce, alist):
    return _apbslib.getForces(atomForce, alist)
getForces = _apbslib.getForces

def loadMolecules(nosh, param, alist):
    return _apbslib.loadMolecules(nosh, param, alist)
loadMolecules = _apbslib.loadMolecules

def killMolecules(nosh, alist):
    return _apbslib.killMolecules(nosh, alist)
killMolecules = _apbslib.killMolecules

def loadDielMaps(nosh, dielXMap, dielYMap, dielZMap):
    return _apbslib.loadDielMaps(nosh, dielXMap, dielYMap, dielZMap)
loadDielMaps = _apbslib.loadDielMaps

def killDielMaps(nosh, dielXMap, dielYMap, dielZMap):
    return _apbslib.killDielMaps(nosh, dielXMap, dielYMap, dielZMap)
killDielMaps = _apbslib.killDielMaps

def loadKappaMaps(nosh, kappa):
    return _apbslib.loadKappaMaps(nosh, kappa)
loadKappaMaps = _apbslib.loadKappaMaps

def killKappaMaps(nosh, kappa):
    return _apbslib.killKappaMaps(nosh, kappa)
killKappaMaps = _apbslib.killKappaMaps

def loadPotMaps(nosh, pot):
    return _apbslib.loadPotMaps(nosh, pot)
loadPotMaps = _apbslib.loadPotMaps

def killPotMaps(nosh, pot):
    return _apbslib.killPotMaps(nosh, pot)
killPotMaps = _apbslib.killPotMaps

def loadChargeMaps(nosh, charge):
    return _apbslib.loadChargeMaps(nosh, charge)
loadChargeMaps = _apbslib.loadChargeMaps

def killChargeMaps(nosh, charge):
    return _apbslib.killChargeMaps(nosh, charge)
killChargeMaps = _apbslib.killChargeMaps

def printPBEPARM(pbeparm):
    return _apbslib.printPBEPARM(pbeparm)
printPBEPARM = _apbslib.printPBEPARM

def printMGPARM(mgparm, realCenter):
    return _apbslib.printMGPARM(mgparm, realCenter)
printMGPARM = _apbslib.printMGPARM

def initMG(i, nosh, mgparm, pbeparm, realCenter, pbe, alist, dielXMap, dielYMap, dielZMap, kappaMap, chargeMap, pmgp, pmg, potMap):
    return _apbslib.initMG(i, nosh, mgparm, pbeparm, realCenter, pbe, alist, dielXMap, dielYMap, dielZMap, kappaMap, chargeMap, pmgp, pmg, potMap)
initMG = _apbslib.initMG

def killMG(nosh, pbe, pmgp, pmg):
    return _apbslib.killMG(nosh, pbe, pmgp, pmg)
killMG = _apbslib.killMG

def solveMG(nosh, pmg, type):
    return _apbslib.solveMG(nosh, pmg, type)
solveMG = _apbslib.solveMG

def setPartMG(nosh, mgparm, pmg):
    return _apbslib.setPartMG(nosh, mgparm, pmg)
setPartMG = _apbslib.setPartMG

def killEnergy():
    return _apbslib.killEnergy()
killEnergy = _apbslib.killEnergy

def killForce(mem, nosh, nforce, atomForce):
    return _apbslib.killForce(mem, nosh, nforce, atomForce)
killForce = _apbslib.killForce

def writedataMG(rank, nosh, pbeparm, pmg):
    return _apbslib.writedataMG(rank, nosh, pbeparm, pmg)
writedataMG = _apbslib.writedataMG

def writematMG(rank, nosh, pbeparm, pmg):
    return _apbslib.writematMG(rank, nosh, pbeparm, pmg)
writematMG = _apbslib.writematMG

def printForce(com, nosh, nforce, atomForce, i):
    return _apbslib.printForce(com, nosh, nforce, atomForce, i)
printForce = _apbslib.printForce

def printElecForce(com, nosh, nforce, atomForce, i):
    return _apbslib.printElecForce(com, nosh, nforce, atomForce, i)
printElecForce = _apbslib.printElecForce

def printApolForce(com, nosh, nforce, atomForce, i):
    return _apbslib.printApolForce(com, nosh, nforce, atomForce, i)
printApolForce = _apbslib.printApolForce

def startVio():
    return _apbslib.startVio()
startVio = _apbslib.startVio

def Vacc_molAcc(thee, center, radius):
    return _apbslib.Vacc_molAcc(thee, center, radius)
Vacc_molAcc = _apbslib.Vacc_molAcc

def Vacc_vdwAcc(thee, center):
    return _apbslib.Vacc_vdwAcc(thee, center)
Vacc_vdwAcc = _apbslib.Vacc_vdwAcc

def energyMG(nosh, icalc, pmg, arg4, INOUT, arg6, arg7, arg8):
    return _apbslib.energyMG(nosh, icalc, pmg, arg4, INOUT, arg6, arg7, arg8)
energyMG = _apbslib.energyMG

def printEnergy(com, nosh, totEnergy, i):
    return _apbslib.printEnergy(com, nosh, totEnergy, i)
printEnergy = _apbslib.printEnergy

def printElecEnergy(com, nosh, totEnergy, i):
    return _apbslib.printElecEnergy(com, nosh, totEnergy, i)
printElecEnergy = _apbslib.printElecEnergy

def printApolEnergy(nosh, i):
    return _apbslib.printApolEnergy(nosh, i)
printApolEnergy = _apbslib.printApolEnergy

def returnEnergy(com, nosh, totEnergy, i):
    return _apbslib.returnEnergy(com, nosh, totEnergy, i)
returnEnergy = _apbslib.returnEnergy
# This file is compatible with both classic and new-style classes.


